#!/usr/bin/env python3
"""
üó∫Ô∏è TELEOP MAPPING IMPEC√ÅVEL - RPLIDAR S2 OTIMIZADO

Sistema 100% otimizado para mapeamento manual de alta precis√£o.
Configurado especificamente para RPLIDAR S2 com m√°xima toler√¢ncia a delays.

ARQUITETURA ROBUSTA:
===================
Este launch combina apenas os componentes essenciais para mapeamento:
- RPLIDAR S2 (dados brutos, 10Hz, resolu√ß√£o 0.12¬∞)
- SLAM Toolbox (par√¢metros otimizados para delays USB)
- Teleop Keyboard (controle suave e responsivo)
- RViz2 (visualiza√ß√£o em tempo real)

‚ö†Ô∏è HARDWARE OBRIGAT√ìRIO EM OUTROS TERMINAIS:
============================================

TERMINAL 1 - ENCODER/ODOMETRIA:
  cd ~/Caramelo_workspace && source install/setup.bash
  ros2 launch caramelo_bringup encoder_bringup.launch.py

TERMINAL 2 - PWM/MOVIMENTO:  
  cd ~/Caramelo_workspace && source install/setup.bash
  ros2 launch caramelo_bringup pwm_bringup.launch.py

TERMINAL 3 - ESTE MAPEAMENTO:
  cd ~/Caramelo_workspace && source install/setup.bash
  ros2 launch caramelo_navigation teleop_mapping.launch.py arena:=NOME_ARENA

üéÆ CONTROLES DE MAPEAMENTO:
==========================
Teclas de movimento:
  i = frente            , = r√©-esquerda
  k = PARAR             . = r√©-direita  
  j = esquerda          m = r√©
  l = direita
  u = diagonal ‚Üñ        o = diagonal ‚Üó

Controle de velocidade:
  q/z = aumentar/diminuir velocidade linear
  w/x = aumentar/diminuir velocidade angular

üèÜ METODOLOGIA PARA MAPEAMENTO PERFEITO:
=======================================
1. üêå VELOCIDADE BAIXA - RPLIDAR S2 precisa tempo para processar
2. üîÑ FECHAR LOOPS - sempre retornar por caminhos j√° mapeados
3. üëÅÔ∏è MONITOR RVIZ - verificar alinhamento constante dos scans
4. üö™ EXPLORA√á√ÉO TOTAL - cada canto, corredor e obst√°culo
5. ‚è∏Ô∏è PAUSE QUANDO NECESS√ÅRIO - melhor pausar que corrigir depois
6. üìê ROTA√á√ïES SUAVES - evitar movimentos bruscos no eixo angular
7. üéØ COVERAGE COMPLETO - garantir 100% da √°rea mapeada

üíæ SALVAMENTO DO MAPA:
=====================
# Comando para salvar (execute em outro terminal):
ros2 run nav2_map_server map_saver_cli -f ~/Caramelo_workspace/maps/NOME_ARENA/map

# O mapa ser√° salvo automaticamente como:
# - map.pgm (imagem do mapa)
# - map.yaml (metadados e configura√ß√µes)

üèüÔ∏è EXEMPLOS DE ARENAS:
======================
# Arena principal do laborat√≥rio:
ros2 launch caramelo_navigation teleop_mapping.launch.py arena:=laboratorio_fei

# Arena oficial da competi√ß√£o:  
ros2 launch caramelo_navigation teleop_mapping.launch.py arena:=robocup_2025

# Arena de testes e desenvolvimento:
ros2 launch caramelo_navigation teleop_mapping.launch.py arena:=teste_desenvolvimento

# Arena hotel (exemplo j√° criado):
ros2 launch caramelo_navigation teleop_mapping.launch.py arena:=hotel

üìä MONITORAMENTO EM RVIZ:
========================
- /scan: pontos vermelhos do RPLIDAR S2 
- /map: mapa sendo constru√≠do em tempo real
- /tf: transforma√ß√µes entre frames (base_link, laser_frame, odom, map)
- trajectory: trajet√≥ria percorrida (linha verde)

‚ö° OTIMIZA√á√ïES IMPLEMENTADAS:
============================
- SLAM configurado para delays de at√© 500ms (USB/ESP32)
- Toler√¢ncia alta a odometria ruim 
- Taxa de publica√ß√£o otimizada para 10Hz do RPLIDAR
- Filtros adaptados para ambiente real
- Interface responsiva mesmo com lag
"""

import os

from ament_index_python.packages import get_package_share_directory
from launch import LaunchDescription
from launch.actions import DeclareLaunchArgument, IncludeLaunchDescription
from launch.launch_description_sources import PythonLaunchDescriptionSource
from launch.substitutions import LaunchConfiguration


def generate_launch_description():
    """
    TELEOP MAPPING LAUNCH - Sistema impec√°vel para mapeamento manual
    
    Componentes inclu√≠dos:
    1. RPLIDAR S2 (via mapping_launch.py)
    2. SLAM Toolbox com par√¢metros otimizados
    3. RViz2 com configura√ß√£o espec√≠fica para mapeamento
    4. Teleop Keyboard para controle responsivo
    5. Twist Converter para compatibilidade mecanum
    
    NOTA: Encoder e PWM devem rodar em terminais separados para
    m√°xima estabilidade e controle independente.
    """
    
    # Configura√ß√µes de launch
    use_sim_time = LaunchConfiguration('use_sim_time')
    arena = LaunchConfiguration('arena')
    
    # Argumentos de entrada
    declare_use_sim_time_cmd = DeclareLaunchArgument(
        'use_sim_time',
        default_value='false',
        description='Usar tempo de simula√ß√£o (false para hardware real)')
    
    declare_arena_cmd = DeclareLaunchArgument(
        'arena',
        default_value='default',
        description='Nome da arena para organiza√ß√£o de mapas')

    # 1. Sistema de mapeamento completo (LIDAR + SLAM + RViz)
    mapping_launch = IncludeLaunchDescription(
        PythonLaunchDescriptionSource(
            os.path.join(get_package_share_directory('caramelo_navigation'),
                         'launch', 'mapping_launch.py')),
        launch_arguments={
            'use_sim_time': use_sim_time
        }.items()
    )

    # 2. Sistema de teleopera√ß√£o (Keyboard + Twist Converter)
    teleop_launch = IncludeLaunchDescription(
        PythonLaunchDescriptionSource(
            os.path.join(get_package_share_directory('caramelo_bringup'),
                         'launch', 'teleop_keyboard.launch.py'))
    )

    return LaunchDescription([
        # Declara√ß√£o de argumentos
        declare_use_sim_time_cmd,
        declare_arena_cmd,
        
        # Sistemas principais
        mapping_launch,    # RPLIDAR S2 + SLAM Toolbox + RViz2
        teleop_launch,     # Teleop Keyboard + Twist Converter
    ])
